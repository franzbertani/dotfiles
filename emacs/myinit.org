#+STARTIP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
(tool-bar-mode -1)
(show-paren-mode 1)
(when (boundp 'scoll-bar-mode)
  (scroll-bar-mode -1))

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(global-set-key (kbd "<f5>") 'revert-buffer)

(setq display-line-numbers-type t)
(column-number-mode t)

(setq tab-width 4)
(defalias 'list-buffers 'ibuffer)
#+END_SRC

* Remember cursor position
  Cursor positions are stored in `saveplace` in `user-emacs-directory`
#+BEGIN_SRC emacs-lisp
(setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
(save-place-mode 1)
#+END_SRC

* Backup folder
  Save backups in `~/.emacs.d/backups`
#+BEGIN_SRC emacs-lisp
(defvar backup-dir "~/.emacs.d/backups/")
(setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC

* All the icons
  Some nice icons here and there.
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :hook
  ((dired-mode) . all-the-icons-dired-mode))
#+END_SRC

* Doom themes
  Nice themes. I currently use doom-one.
  It has a nice option to enable flashing the mode line instead of visual bell.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

* Exec path from shell
  It sets the exec path copying it from the shell environment.
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer t)

(when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

* Persistent undo and undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-history-directory-alist
        (list (cons "." (expand-file-name "undo-tree-history" user-emacs-directory)))))
#+END_SRC

* Ace window
  It helps moving around windows.
  Last three lines make the numbers bigger.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)))
#+END_SRC

* Avy
  Nice way to move around.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :config
	(setq avy-background t)
  :bind
    ("C-'" . avy-goto-char-2))
#+END_SRC

* Which key
  It provides help on keybindings, showing a legend 1 second after C-x.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t 
  :config
  (which-key-mode))
#+END_SRC

* Org-mode bullets
  Nicer bullets in org-mode headers
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+END_SRC
